// src/packages/sparkblock/components/PlusMenu.tsx

import React, { useState, useEffect, useMemo, useRef } from 'react';
import {
  Type,
  Heading1,
  Heading2,
  Heading3,
  Quote,
  Code,
  List,
  ListOrdered,
  Image,
  Minus,
  X,
} from 'lucide-react';
import { useSparkBlock } from './SparkBlockProvider';

export interface PlusMenuProps {
  position: { x: number; y: number };
  onClose: () => void;
}

interface BlockTypeOption {
  id: string;
  name: string;
  description: string;
  icon: React.ReactNode;
  category: string;
  keywords: string[];
}

// In a production system, this list would be dynamically generated by calling
// `engine.adapter.getAvailableBlocks()`. For this component, we use a static list.
const ALL_BLOCK_TYPES: BlockTypeOption[] = [
  { id: 'paragraph', name: 'Text', description: 'Plain text paragraph', icon: <Type size={20} />, category: 'Basic', keywords: ['text', 'paragraph', 'p'] },
  { id: 'heading_1', name: 'Heading 1', description: 'Large section heading', icon: <Heading1 size={20} />, category: 'Text', keywords: ['heading', 'h1', 'title'] },
  { id: 'heading_2', name: 'Heading 2', description: 'Medium section heading', icon: <Heading2 size={20} />, category: 'Text', keywords: ['heading', 'h2', 'subtitle'] },
  { id: 'heading_3', name: 'Heading 3', description: 'Small section heading', icon: <Heading3 size={20} />, category: 'Text', keywords: ['heading', 'h3'] },
  { id: 'quote', name: 'Quote', description: 'Capture a quote with a citation', icon: <Quote size={20} />, category: 'Text', keywords: ['quote', 'blockquote'] },
  { id: 'code', name: 'Code Block', description: 'Share a snippet of code', icon: <Code size={20} />, category: 'Media', keywords: ['code', 'programming', 'snippet'] },
  { id: 'unordered_list', name: 'Bulleted List', description: 'A simple bulleted list', icon: <List size={20} />, category: 'Basic', keywords: ['list', 'bullet', 'ul'] },
  { id: 'ordered_list', name: 'Numbered List', description: 'A list with ordered numbers', icon: <ListOrdered size={20} />, category: 'Basic', keywords: ['list', 'numbered', 'ol'] },
  { id: 'image', name: 'Image', description: 'Upload or embed with a link', icon: <Image size={20} />, category: 'Media', keywords: ['image', 'photo', 'picture', 'img'] },
  { id: 'divider', name: 'Divider', description: 'A horizontal line separator', icon: <Minus size={20} />, category: 'Layout', keywords: ['divider', 'separator', 'hr', 'line'] },
];

/**
 * A popup menu for creating and inserting new blocks into the editor.
 * Provides search, filtering, and keyboard navigation for a seamless user experience.
 */
export function PlusMenu({ position, onClose }: PlusMenuProps) {
  const { engine } = useSparkBlock();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndex, setSelectedIndex] = useState(0);
  const menuRef = useRef<HTMLDivElement>(null);
  const searchRef = useRef<HTMLInputElement>(null);
  const listRef = useRef<HTMLDivElement>(null);

  // Memoize the filtering logic for performance.
  const filteredTypes = useMemo(() => {
    if (!searchQuery) return ALL_BLOCK_TYPES;
    const lowerQuery = searchQuery.toLowerCase();
    return ALL_BLOCK_TYPES.filter(
      type =>
        type.name.toLowerCase().includes(lowerQuery) ||
        type.keywords.some(kw => kw.toLowerCase().includes(lowerQuery))
    );
  }, [searchQuery]);

  // Group the filtered types by category.
  const groupedTypes = useMemo(() => {
    return filteredTypes.reduce((groups, type) => {
      const category = type.category;
      if (!groups[category]) {
        groups[category] = [];
      }
      groups[category].push(type);
      return groups;
    }, {} as Record<string, BlockTypeOption[]>);
  }, [filteredTypes]);

  // Action to create the selected block.
  const handleSelectBlock = (blockType: string) => {
    engine.createBlock(blockType).then(onClose);
  };

  // Effect for keyboard navigation.
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          setSelectedIndex(prev => Math.min(prev + 1, filteredTypes.length - 1));
          break;
        case 'ArrowUp':
          event.preventDefault();
          setSelectedIndex(prev => Math.max(prev - 1, 0));
          break;
        case 'Enter':
          event.preventDefault();
          if (filteredTypes[selectedIndex]) {
            handleSelectBlock(filteredTypes[selectedIndex].id);
          }
          break;
        case 'Escape':
          onClose();
          break;
      }
    };
    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [filteredTypes, selectedIndex, onClose, handleSelectBlock]);

  // Effect to handle clicking outside the menu.
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        onClose();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [onClose]);

  // Auto-focus the search input when the menu opens.
  useEffect(() => {
    searchRef.current?.focus();
  }, []);
  
  // Scroll the selected item into view.
  useEffect(() => {
    const selectedElement = listRef.current?.querySelector('.sparkblock-plus-menu-item--selected');
    selectedElement?.scrollIntoView({ block: 'nearest' });
  }, [selectedIndex]);

  return (
    <div
      ref={menuRef}
      className="sparkblock-plus-menu"
      style={{
        position: 'fixed',
        left: position.x,
        top: position.y,
        zIndex: 1000,
      }}
    >
      <div className="sparkblock-plus-menu-header">
        <input
          ref={searchRef}
          type="text"
          placeholder="Search for blocks..."
          value={searchQuery}
          onChange={e => {
            setSearchQuery(e.target.value);
            setSelectedIndex(0); // Reset selection on new search
          }}
          className="sparkblock-plus-menu-search"
        />
        <button onClick={onClose} className="sparkblock-plus-menu-close" title="Close">
          <X size={16} />
        </button>
      </div>

      <div ref={listRef} className="sparkblock-plus-menu-content">
        {filteredTypes.length === 0 ? (
          <div className="sparkblock-plus-menu-empty">
            No blocks found
          </div>
        ) : (
          Object.entries(groupedTypes).map(([category, types]) => (
            <div key={category} className="sparkblock-plus-menu-category">
              <div className="sparkblock-plus-menu-category-title">
                {category}
              </div>
              {types.map(type => {
                const isSelected = filteredTypes[selectedIndex]?.id === type.id;
                return (
                  <button
                    key={type.id}
                    className={`sparkblock-plus-menu-item ${isSelected ? 'sparkblock-plus-menu-item--selected' : ''}`}
                    onClick={() => handleSelectBlock(type.id)}
                    onMouseEnter={() => {
                        const index = filteredTypes.findIndex(t => t.id === type.id);
                        if (index !== -1) setSelectedIndex(index);
                    }}
                  >
                    <div className="sparkblock-plus-menu-item-icon">{type.icon}</div>
                    <div className="sparkblock-plus-menu-item-content">
                      <div className="sparkblock-plus-menu-item-name">{type.name}</div>
                      <div className="sparkblock-plus-menu-item-description">{type.description}</div>
                    </div>
                  </button>
                );
              })}
            </div>
          ))
        )}
      </div>
    </div>
  );
}