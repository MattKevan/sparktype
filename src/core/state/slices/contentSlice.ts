// src/core/state/slices/contentSlice.ts

import { type StateCreator } from 'zustand';
import { produce } from 'immer';
import { toast } from 'sonner';

// Core Types and Services
import { type ParsedMarkdownFile, type StructureNode, type LocalSiteData, type CollectionItemRef } from '@/core/types';
import * as localSiteFs from '@/core/services/localFileSystem.service';
import { saveContentFile } from '@/core/services/localFileSystem.service';
import { findAndRemoveNode, updatePathsRecursively, findNodeByPath } from '@/core/services/fileTree.service';
import { getCollections } from '@/core/services/collections.service';
import { stringifyToMarkdown, parseMarkdownString } from '@/core/libraries/markdownParser';
import { type SiteSlice } from '@/core/state/slices/siteSlice';

// Helper: Generates an up-to-date list of collection item references.
function buildCollectionItemRefs(siteData: LocalSiteData): CollectionItemRef[] {
  const collections = getCollections(siteData.manifest);
  const newCollectionItems: CollectionItemRef[] = [];
  for (const collection of collections) {
    const items = (siteData.contentFiles || []).filter(file => file.path.startsWith(collection.contentPath));
    for (const item of items) {
      // Don't hardcode the URL here - let the URL service handle it properly
      newCollectionItems.push({ 
        collectionId: collection.id, 
        slug: item.slug, 
        path: item.path, 
        title: item.frontmatter.title || item.slug, 
        url: '' // Will be generated by URL service when needed
      });
    }
  }
  return newCollectionItems;
}

// Helper: Updates content file paths immutably.
const updateContentFilePaths = (files: ParsedMarkdownFile[], pathsToMove: { oldPath: string; newPath: string }[]): ParsedMarkdownFile[] => {
  const pathMap = new Map(pathsToMove.map(p => [p.oldPath, p.newPath]));
  return files.map(file => {
    if (pathMap.has(file.path)) {
      const newPath = pathMap.get(file.path)!;
      const newSlug = newPath.replace(/^content\//, '').replace(/\.md$/, '');
      return { ...file, path: newPath, slug: newSlug };
    }
    return file;
  });
};

export interface ContentSlice {
  addOrUpdateContentFile: (siteId: string, filePath: string, rawMarkdownContent: string) => Promise<boolean>;
  deleteContentFileAndState: (siteId: string, filePath: string) => Promise<void>;
  repositionNode: (siteId: string, activeNodePath: string, newParentPath: string | null, newIndex: number) => Promise<void>;
  updateContentFileOnly: (siteId: string, savedFile: ParsedMarkdownFile) => Promise<void>;
  setAsHomepage: (siteId: string, filePath: string) => Promise<void>;
}

export const createContentSlice: StateCreator<SiteSlice & ContentSlice, [], [], ContentSlice> = (set, get) => ({
  
  updateContentFileOnly: async (siteId, savedFile) => {
    await localSiteFs.saveContentFile(siteId, savedFile.path, stringifyToMarkdown(savedFile.frontmatter, savedFile.content));

    set(produce((draft: SiteSlice) => {
      const siteToUpdate = draft.sites.find(s => s.siteId === siteId);
      if (!siteToUpdate?.contentFiles) return;
      
      const fileIndex = siteToUpdate.contentFiles.findIndex(f => f.path === savedFile.path);
      if (fileIndex !== -1) siteToUpdate.contentFiles[fileIndex] = savedFile;
      else siteToUpdate.contentFiles.push(savedFile);
    }));

    const siteData = get().getSiteById(siteId);
    if (!siteData) return;

    const newManifest = produce(siteData.manifest, draft => {
        draft.collectionItems = buildCollectionItemRefs(siteData as LocalSiteData);
    });

    await get().updateManifest(siteId, newManifest);
  },

  addOrUpdateContentFile: async (siteId, filePath, rawMarkdownContent) => {
    const site = get().getSiteById(siteId);
    if (!site) return false;

    // Check if this is the first file being created for the site
    let processedContent = rawMarkdownContent;
    const isFirstFile = site.manifest.structure.length === 0 && !site.contentFiles?.some(f => f.path === filePath);
    
    if (isFirstFile) {
      // Parse the frontmatter and mark as homepage
      const { frontmatter, content } = parseMarkdownString(rawMarkdownContent);
      const updatedFrontmatter = { ...frontmatter, homepage: true };
      processedContent = stringifyToMarkdown(updatedFrontmatter, content);
      toast.info("First page created. It has been set as the permanent homepage.");
    }

    const savedFile = await localSiteFs.saveContentFile(siteId, filePath, processedContent);
    
    // Determine if this is a new file that needs to be added to the navigation structure.
    const isNewFileInStructure = !findNodeByPath(site.manifest.structure, filePath);

    // Atomically create the new manifest with all necessary updates.
    const newManifest = produce(site.manifest, draft => {
      if (isNewFileInStructure) {
        // Determine if this is a collection item by checking path against collection contentPaths
        const collections = getCollections(draft);
        const isCollectionPage = savedFile.frontmatter.collection;
        const isCollectionItem = !isCollectionPage && collections.some(c => savedFile.path.startsWith(c.contentPath));

        // Only add to structure if it's NOT a collection item
        // Collection items should be managed separately and not appear in navigation
        if (!isCollectionItem) {
          const newNode: StructureNode = {
            type: 'page',
            title: savedFile.frontmatter.title,
            path: filePath,
            slug: savedFile.slug,
            navOrder: draft.structure.length,
            children: []
          };
          draft.structure.push(newNode);
        }
      } else {
        // If it's an existing file, update its title in the structure.
        const findAndUpdate = (nodes: StructureNode[]): void => {
          for (const node of nodes) {
            if (node.path === filePath) { node.title = savedFile.frontmatter.title; return; }
            if (node.children) findAndUpdate(node.children);
          }
        };
        findAndUpdate(draft.structure);
      }
    });

    // Update both manifest and contentFiles atomically in a single state update
    set(produce((draft: SiteSlice) => {
      const siteToUpdate = draft.sites.find(s => s.siteId === siteId);
      if (!siteToUpdate) return;
      if (!siteToUpdate.contentFiles) siteToUpdate.contentFiles = [];

      // Update the manifest structure (copy the structure from newManifest)
      siteToUpdate.manifest.structure = newManifest.structure;

      // Update contentFiles array
      const fileIndex = siteToUpdate.contentFiles.findIndex(f => f.path === savedFile.path);
      if (fileIndex !== -1) siteToUpdate.contentFiles[fileIndex] = savedFile;
      else siteToUpdate.contentFiles.push(savedFile);
      
      // Rebuild the collection item index based on the latest contentFiles.
      siteToUpdate.manifest.collectionItems = buildCollectionItemRefs(siteToUpdate as LocalSiteData);
    }));

    // Persist the final manifest to disk (including updated collectionItems)
    const finalManifest = get().getSiteById(siteId)!.manifest;
    await get().updateManifest(siteId, finalManifest);

    return true;
  },
    
  deleteContentFileAndState: async (siteId, filePath) => {
    const site = get().getSiteById(siteId);
    if (!site) return;
    
    const fileToDelete = site.contentFiles?.find(f => f.path === filePath);
    if (fileToDelete?.frontmatter.homepage === true) {
      toast.error("Cannot delete the homepage.", { description: "The first page of a site is permanent." });
      return;
    }

    // First, update the manifest structure.
    const newManifest = produce(site.manifest, draft => {
      const filterStructure = (nodes: StructureNode[]): StructureNode[] => nodes.filter(node => {
        if (node.path === filePath) return false;
        if (node.children) node.children = filterStructure(node.children);
        return true;
      });
      draft.structure = filterStructure(draft.structure);
    });

    // Persist changes and delete the file in parallel.
    await Promise.all([
      localSiteFs.deleteContentFile(siteId, filePath),
      get().updateManifest(siteId, newManifest),
    ]);

    // Update the in-memory state and sync collectionItems.
    set(produce((draft: SiteSlice) => {
      const siteToUpdate = draft.sites.find(s => s.siteId === siteId);
      if (!siteToUpdate?.contentFiles) return;
      siteToUpdate.contentFiles = siteToUpdate.contentFiles.filter(f => f.path !== filePath);
      siteToUpdate.manifest.collectionItems = buildCollectionItemRefs(siteToUpdate as LocalSiteData);
    }));
    
    // Save the final manifest with the updated collectionItems.
    const finalManifest = get().getSiteById(siteId)!.manifest;
    await localSiteFs.saveManifest(siteId, finalManifest);

    toast.success(`Page "${fileToDelete?.frontmatter.title || 'file'}" deleted.`);
  },
    
  repositionNode: async (siteId, activeNodePath, newParentPath, newIndex) => {
    const site = get().getSiteById(siteId);
    if (!site?.contentFiles || !site.manifest) {
      toast.error("Site data not ready. Cannot move page.");
      return;
    }
    const { structure } = site.manifest;
    if (activeNodePath === structure[0]?.path) {
      toast.error("The homepage cannot be moved.");
      return;
    }

    const { found: activeNode, tree: treeWithoutActive } = findAndRemoveNode([...structure], activeNodePath);
    if (!activeNode) return;

    const newParentDir = newParentPath ? newParentPath.replace(/\.md$/, '') : 'content';
    const finalActiveNode = updatePathsRecursively(activeNode, newParentDir);
    
    const pathsToMove: { oldPath: string; newPath: string }[] = [];
    const collectPaths = (newNode: StructureNode, oldNode: StructureNode) => {
        if (newNode.path !== oldNode.path) pathsToMove.push({ oldPath: oldNode.path, newPath: newNode.path });
        if (newNode.children && oldNode.children) newNode.children.forEach((child, i) => collectPaths(child, oldNode.children![i]));
    };
    collectPaths(finalActiveNode, activeNode);
    
    const finalTree = produce(treeWithoutActive, (draft: StructureNode[]) => {
        if (newParentPath) {
            const parent = findNodeByPath(draft, newParentPath);
            if (parent) {
                parent.children = parent.children || [];
                parent.children.splice(newIndex, 0, finalActiveNode);
            }
        } else {
            draft.splice(newIndex, 0, finalActiveNode);
        }
    });
    
    try {
      if (pathsToMove.length > 0) await localSiteFs.moveContentFiles(siteId, pathsToMove);
      
      const newManifest = { ...site.manifest, structure: finalTree };
      await get().updateManifest(siteId, newManifest);

      set(produce((draft: SiteSlice) => {
        const siteToUpdate = draft.sites.find(s => s.siteId === siteId);
        if (!siteToUpdate) return;
        siteToUpdate.contentFiles = updateContentFilePaths(siteToUpdate.contentFiles!, pathsToMove);
        siteToUpdate.manifest.collectionItems = buildCollectionItemRefs(siteToUpdate as LocalSiteData);
      }));

      const finalManifest = get().getSiteById(siteId)!.manifest;
      await localSiteFs.saveManifest(siteId, finalManifest);

      toast.success("Site structure updated successfully.");
    } catch (error) {
      console.error("Failed to reposition node:", error);
      toast.error("An error occurred while updating the site structure. Reverting changes.");
      get().loadSite(siteId);
    }
  },

  // Set a page as the site homepage
  setAsHomepage: async (siteId: string, filePath: string) => {
    try {
      const site = get().getSiteById(siteId);
      if (!site?.contentFiles) {
        toast.error("Site data not found");
        return;
      }

      // Find the current homepage
      const currentHomepage = site.contentFiles.find(f => f.frontmatter.homepage === true);
      const targetFile = site.contentFiles.find(f => f.path === filePath);

      if (!targetFile) {
        toast.error("Page not found");
        return;
      }

      if (targetFile.frontmatter.homepage === true) {
        toast.info("This page is already the homepage");
        return;
      }

      // Update frontmatter for both files
      const updates: Array<{ path: string; frontmatter: any }> = [];

      // Clear current homepage
      if (currentHomepage) {
        const updatedCurrentFrontmatter = { ...currentHomepage.frontmatter };
        delete updatedCurrentFrontmatter.homepage;
        updates.push({ path: currentHomepage.path, frontmatter: updatedCurrentFrontmatter });
      }

      // Set new homepage
      const updatedTargetFrontmatter = { ...targetFile.frontmatter, homepage: true };
      updates.push({ path: filePath, frontmatter: updatedTargetFrontmatter });

      // Apply updates and update state
      set(produce((draft: SiteSlice) => {
        const siteToUpdate = draft.sites.find(s => s.siteId === siteId);
        if (!siteToUpdate?.contentFiles) return;

        // Update frontmatter in state
        for (const update of updates) {
          const file = siteToUpdate.contentFiles.find(f => f.path === update.path);
          if (file) {
            file.frontmatter = update.frontmatter;
          }
        }
      }));

      // Apply updates to filesystem
      for (const update of updates) {
        const file = site.contentFiles.find(f => f.path === update.path);
        if (file) {
          const updatedContent = stringifyToMarkdown(update.frontmatter, file.content);
          await saveContentFile(siteId, update.path, updatedContent);
        }
      }

      // Move new homepage to top of structure
      set(produce((draft: SiteSlice) => {
        const siteToUpdate = draft.sites.find(s => s.siteId === siteId);
        if (!siteToUpdate?.manifest.structure) return;

        const structure = [...siteToUpdate.manifest.structure];
        const targetNodeIndex = structure.findIndex(node => node.path === filePath);
        
        if (targetNodeIndex > 0) {
          // Move homepage to top
          const [homepageNode] = structure.splice(targetNodeIndex, 1);
          structure.unshift(homepageNode);
          
          // Update structure in state
          siteToUpdate.manifest.structure = structure;
        }
      }));

      // Save updated manifest to filesystem
      const finalSite = get().getSiteById(siteId);
      if (finalSite?.manifest) {
        await localSiteFs.saveManifest(siteId, finalSite.manifest);
      }

      toast.success("Homepage updated successfully");
    } catch (error) {
      console.error("Failed to set as homepage:", error);
      toast.error("Failed to set as homepage");
    }
  },
});