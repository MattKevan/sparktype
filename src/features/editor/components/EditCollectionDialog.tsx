'use client';

import { useState, useEffect, useMemo } from 'react';
import { useAppStore } from '@/core/state/useAppStore';
import { updateCollection } from '@/core/services/collections.service';
import type { Collection } from '@/core/types';

// UI Components
import { Button } from '@/core/components/ui/button';
import { Input } from '@/core/components/ui/input';
import { Label } from '@/core/components/ui/label';
import { Textarea } from '@/core/components/ui/textarea';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/core/components/ui/dialog';
import { toast } from 'sonner';

// Icons
import { Loader2, Edit } from 'lucide-react';

interface EditCollectionDialogProps {
  siteId: string;
  collection: Collection | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export default function EditCollectionDialog({
  siteId,
  collection,
  open,
  onOpenChange,
}: EditCollectionDialogProps) {
  const [isLoading, setIsLoading] = useState(false);

  // Form state
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');

  // Store actions
  const getSiteById = useAppStore(state => state.getSiteById);
  const updateManifest = useAppStore(state => state.updateManifest);
  
  const siteData = getSiteById(siteId);

  // Initialize form with collection data
  useEffect(() => {
    if (collection && open) {
      setName(collection.name);
      setDescription((collection.settings?.description as string) || '');
    }
  }, [collection, open]);


  // Validation
  const isValid = name.trim() !== '';

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isValid || !siteData || !collection) return;

    try {
      setIsLoading(true);

      // Update the collection (contentPath will be auto-generated by the service)
      const updates = {
        name: name.trim(),
        settings: description ? { description: description.trim() } : undefined,
      };

      const updatedManifest = updateCollection(siteData.manifest, collection.id, updates);

      // Update the site manifest in the store
      await updateManifest(siteId, updatedManifest);

      toast.success(`Collection "${name}" updated successfully!`);
      
      // Close dialog
      onOpenChange(false);

    } catch (error) {
      console.error('Failed to update collection:', error);
      toast.error(`Failed to update collection: ${(error as Error).message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setName('');
    setDescription('');
  };

  const handleOpenChange = (newOpen: boolean) => {
    if (!newOpen && !isLoading) {
      resetForm();
    }
    onOpenChange(newOpen);
  };

  if (!collection) return null;

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Edit className="h-5 w-5" />
            Edit Collection
          </DialogTitle>
          <DialogDescription>
            Update the collection settings and configuration.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Collection Name */}
          <div className="space-y-2">
            <Label htmlFor="edit-collection-name">Collection Name *</Label>
            <Input
              id="edit-collection-name"
              placeholder="My Blog"
              value={name}
              onChange={(e) => setName(e.target.value)}
              disabled={isLoading}
              required
            />
          </div>

          {/* Collection Type (Read-only) */}
          <div className="space-y-2">
            <Label>Collection Type</Label>
            <div className="px-3 py-2 border rounded-md bg-muted text-muted-foreground">
              {collection.typeId}
            </div>
            <p className="text-xs text-muted-foreground">
              Collection type cannot be changed after creation
            </p>
          </div>


          {/* Description (Optional) */}
          <div className="space-y-2">
            <Label htmlFor="edit-description">Description</Label>
            <Textarea
              id="edit-description"
              placeholder="Optional description for this collection..."
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              disabled={isLoading}
              rows={3}
            />
          </div>
        </form>

        <DialogFooter>
          <Button
            type="button"
            variant="outline"
            onClick={() => handleOpenChange(false)}
            disabled={isLoading}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            onClick={handleSubmit}
            disabled={!isValid || isLoading}
            className="min-w-[100px]"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                Updating...
              </>
            ) : (
              <>
                <Edit className="h-4 w-4 mr-2" />
                Update Collection
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}