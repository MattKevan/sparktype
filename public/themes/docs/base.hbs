<!DOCTYPE html>
<html lang="en">
<head>
  {{> head headContext}}
</head>
<body 
  x-data="{
    sidebarOpen: false,
    expandedSections: [],
    currentPath: window.location.pathname,
    navData: [
      {{#each navLinks}}
        {
          href: '{{this.href}}',
          children: [
            {{#each this.children}}
              '{{this.href}}'{{#unless @last}},{{/unless}}
            {{/each}}
          ]
        }{{#unless @last}},{{/unless}}
      {{/each}}
    ],
    toggleSection(id) {
      if (this.expandedSections.includes(id)) {
        this.expandedSections = this.expandedSections.filter(item => item !== id);
      } else {
        this.expandedSections.push(id);
      }
    },
    // Normalize URL for consistent comparison
    normalizeUrl: function(url) {
      if (!url) return '/';
      
      // Remove leading './' and convert to absolute path
      var cleaned = url.replace(/^\.\//, '/');
      
      // Remove index.html and trailing slashes, but keep root as '/'
      cleaned = cleaned.replace(/\/index\.html$/, '/');
      cleaned = cleaned.replace(/\/$/, '') || '/';
      
      return cleaned;
    },
    
    // Check if a navigation href is active (matches current page)
    isActive: function(href) {
      if (!href) return false;
      var cleanHref = this.normalizeUrl(href);
      var cleanCurrent = this.normalizeUrl(this.currentPath);
      return cleanHref === cleanCurrent;
    },
    
    // Check if current path is within a section (exact match or child)
    isInSection: function(sectionHref, children) {
      var currentNormalized = this.normalizeUrl(this.currentPath);
      var sectionNormalized = this.normalizeUrl(sectionHref);
      
      // Check if we're on the section page itself
      if (currentNormalized === sectionNormalized) {
        return true;
      }
      
      // Check if we're on any child page
      if (children && children.length > 0) {
        for (var i = 0; i < children.length; i++) {
          var childNormalized = this.normalizeUrl(children[i]);
          if (currentNormalized === childNormalized) {
            return true;
          }
          
          // Also check if current path starts with child path (for nested children)
          if (currentNormalized.startsWith(childNormalized + '/')) {
            return true;
          }
        }
      }
      
      // Check if current path starts with section path (for nested sections)
      if (sectionNormalized !== '/' && currentNormalized.startsWith(sectionNormalized + '/')) {
        return true;
      }
      
      return false;
    },
    
    // Auto-expand all sections by default
    autoExpandSections: function() {
      // Clear existing expanded sections first
      this.expandedSections = [];
      
      // Go through each navigation section and expand all that have children
      for (var i = 0; i < this.navData.length; i++) {
        var section = this.navData[i];
        
        // Skip sections without children (no accordion needed)
        if (!section.children || section.children.length === 0) {
          continue;
        }
        
        // Expand all sections with children by default
        var sectionId = i.toString();
        
        // Add to expanded sections (both desktop and mobile versions)
        this.expandedSections.push(sectionId);
        this.expandedSections.push('mobile-' + sectionId);
      }
    }
  }"
  x-init="autoExpandSections()"
>
{{!-- Header --}}
    {{> header}}
  {{!-- Sidebar Navigation --}}
  {{> sidebar}}

  {{!-- Main Content Area --}}
  <div class="main-content">
    {{!-- Header --}}
    {{> header}}

    {{!-- Page Content --}}
    <main class="content">
      <div class="prose">
        {{{body}}}
      </div>
    </main>

    {{!-- Footer --}}
    {{> footer}}
  </div>
</body>
</html>